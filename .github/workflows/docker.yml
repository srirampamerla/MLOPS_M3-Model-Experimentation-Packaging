name: CI/CD for Dockerized Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Python (for dependencies installation)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    # Step 3: Install Python dependencies
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run GridSearch Script Directly to train model
    - name: Run GridSearch Script
      run: |
        python scripts/gridsearch.py
    
    # Step 5: Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t flask-app .

    # Step 6: Run Docker container
    - name: Run Docker Container
      run: |
        docker run -d -p 5000:5000 --name flask-container flask-app

    # Step 7: Wait for the container to initialize
    - name: Wait for container to initialize
      run: |
        sleep 30  # Increase the sleep time to ensure Flask app is fully started

    # Step 8: Test Flask API with Python Requests
    - name: Install requests and Test Flask API with Python Requests
      run: |
        pip install requests
        python -c "
        import requests
        import pandas as pd
        url = 'http://localhost:5000/predict'
    
        #   Create the data as a DataFrame
        data = {'feature1': [5.1], 'feature2': [3.5], 'feature3': [1.4], 'feature4': [0.2]}
        input_data = pd.DataFrame(data)

        # Convert DataFrame to dictionary for JSON format
        response = requests.post(url, json=input_data.to_dict(orient='records'))
    
         print(response.status_code)
        print(response.json())
        "


    # Step 9: Check Docker container logs for errors
    - name: Check Docker Container Logs
      run: |
        docker logs flask-container

    # Step 10: Clean up Docker container
    - name: Clean up Docker Container
      run: |
        docker stop flask-container
        docker rm flask-container
